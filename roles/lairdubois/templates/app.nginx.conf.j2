# {{ ansible_managed }}

geo $banned_ip {
    default     0;
}

map $http_referer $banned_referer {
    default     0;
}

map $http_user_agent $banned_agent {
    default     0;
    "~https://developers.google.com/./web/snippet/"   1;
}

upstream websocket {
  server 127.0.0.1:8080;
}

server {
{% if env == 'dev' %}
    listen                  {{ dev_port }} ssl http2;
{% endif %}
    listen                  [::]:443 ssl http2;
    server_name             {{ main_host }};
    root                    /var/www/{{ main_host }}/web;
    client_max_body_size    60M;
    add_header              X-Frame-Options "SAMEORIGIN";
    add_header              X-XSS-Protection "1; mode=block";
    add_header              X-UA-Compatible "IE=edge";


    ssl_certificate         /etc/certs/{{ main_host }}/fullchain.cer;
    ssl_certificate_key     /etc/certs/{{ main_host }}/{{ main_host }}.key;

    ssl_session_timeout 5m;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers HIGH+kEECDH+AESGCM:HIGH+kEECDH:HIGH+kEDH:HIGH:!aNULL;
    ssl_prefer_server_ciphers on;

    if ($banned_ip) {
        return 444;
    }
    if ($banned_referer) {
        return 444
    }
    if ($banned_agent) {
        return 444;
    }

    # strip {{ app_index }}/ prefix if it is present
    rewrite ^/{{ app_index }}/?(.*)$ /$1 permanent;

    # Root location
    location / {
        index {{ app_index }};
        try_files $uri @rewriteapp;
    }

    # WebSocket location
    location /ws {
        proxy_pass http://websocket;
        proxy_http_version 1.1;
        proxy_set_header Upgrade websocket;
        proxy_set_header Connection upgrade;
        proxy_read_timeout 4h;
    }

    # Unresolved Media location
    location ~ ^/media/cache/resolve/ {
        rewrite ^(.*)$ /{{ app_index }}/$1 last;
    }

    # Deprecated 800x700i Media location
    location ~ ^/media/cache/800x700i/ {
        rewrite ^/media/cache/800x700i/(.*)$ /{{ app_index }}/media/cache/resolve/1024x1024i/$1 permanent;
    }

    # Resolved Media location
    location ~ ^/media/cache/ {
        if (-f $request_filename) {
            expires 1y;
            access_log off;
            add_header Cache-Control "public";
        }
        try_files $uri @rewriteimagine;
    }

    location @rewriteimagine {
        rewrite ^/media/cache/(.*)$ /{{ app_index }}/media/cache/resolve/$1 permanent;
    }

    location @rewriteapp {
        rewrite ^(.*)$ /{{ app_index }}/$1 last;
    }

    location ~ ^/(app|app_dev|config)\.php(/|$) {
        fastcgi_pass unix:/run/php/php{{ php_version }}-fpm.sock;
        fastcgi_split_path_info ^(.+\.php)(/.*)$;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param HTTPS on;
        fastcgi_param HTTP_SCHEME https;
        fastcgi_param PATH /usr/bin:;
        # Prevents URIs that include the front controller. This will 404:
        # http://domain.tld/app.php/some-path
        # Remove the internal directive to allow URIs like this
        internal;
    }

    # Media: images, icons
    location ~* (?!sticker)\.(?:jpg|jpeg|png|ico|cur|svg|svgz)$ {
        expires 1y;
        access_log off;
        add_header Cache-Control "public";
    }

    # CSS and Javascript
    location ~* \.(?:css|js)$ {
        expires 1y;
        access_log off;
        add_header Cache-Control "public";
    }

    # Fonts
    location ~* \.(?:eot|ttf|woff)$ {
        expires 1y;
        access_log off;
        add_header Cache-Control "public";
    }

    error_log /var/log/nginx/{{ main_host }}_error.log;
    access_log /var/log/nginx/{{ main_host }}_access.log;

}

server {
    listen 127.0.0.1;

    location /nginx_status {
        stub_status on;
        access_log  off;
        allow       127.0.0.1;
        deny        all;
    }

    location ~ ^/(status|ping)$ {
        access_log      off;
        allow           127.0.0.1;
        deny            all;
        include         fastcgi_params;
        fastcgi_param   SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_pass    unix:/run/php/php{{ php_version }}-fpm.sock;
    }

}

server {
    listen          80;
    listen          [::]:80;
    server_name             {% for d in domains %}{{ d }} *.{{ d }} {% endfor %};

    location ~ ^/\.well-known/acme-challenge/(.+)$ {
        allow all;
        alias /var/www/.well-known/acme-challenge/$1;
        log_not_found off;
        access_log off;
    }

    return          301 https://{{ main_host }}$request_uri;
}

server {
    listen                  443 ssl http2;
    listen                  [::]:443 http2;
    server_name             {% for d in domains %}{{ d }} *.{{ d }} {% endfor %};

    ssl_certificate         /etc/certs/{{ main_host }}/fullchain.cer;
    ssl_certificate_key     /etc/certs/{{ main_host }}/{{ main_host }}.key;

    ssl_session_timeout 5m;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers HIGH+kEECDH+AESGCM:HIGH+kEECDH:HIGH+kEDH:HIGH:!aNULL;
    ssl_prefer_server_ciphers on;

    location ~ ^/\.well-known/acme-challenge/(.+)$ {
        allow all;
        alias /var/www/.well-known/acme-challenge/$1;
        log_not_found off;
        access_log off;
    }

    return          301 https://{{ main_host }}$request_uri;
}
